name: CI/CD Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  composer-setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          tools: composer:v2

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

  docker-setup:
    needs: composer-setup
    runs-on: ubuntu-latest
    env:
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      HASH_SALT: ${{ secrets.HASH_SALT }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      DOMAIN_NAME: drupal.madsnorgaard.net
      TRUSTED_HOST_PATTERNS: drupal.madsnorgaard.net
      WEBROOT_SITE: web

    steps:
      - name: Cleanup build folder
        run: |
          rm -rf ./* ./.??*

      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup .env file
        run: |
          echo "DB_NAME=$DB_NAME" >> .env
          echo "DB_USER=$DB_USER" >> .env
          echo "DB_PASS=$DB_PASS" >> .env
          echo "DB_HOST=$DB_HOST" >> .env
          echo "DB_PORT=$DB_PORT" >> .env
          echo "HASH_SALT=$HASH_SALT" >> .env
          echo "REDIS_HOST=$REDIS_HOST" >> .env
          echo "REDIS_PASSWORD=$REDIS_PASSWORD" >> .env
          echo "REDIS_PORT=$REDIS_PORT" >> .env
          echo "DOMAIN_NAME=$DOMAIN_NAME" >> .env
          echo "TRUSTED_HOST_PATTERNS=$TRUSTED_HOST_PATTERNS" >> .env
          echo "WEBROOT_SITE=$WEBROOT_SITE" >> .env

      - name: Setup Docker network
        run: |
          docker network ls | grep -wq web || docker network create web

      - name: Install Docker Compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/v2.16.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

      - name: Start Docker containers
        run: |
          docker-compose up -d --build

  deploy:
    needs: docker-setup
    runs-on: ubuntu-latest
    environment: test-server
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: false

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Add SSH key to known hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS and Install dependencies
        uses: appleboy/ssh-action@v0.1.2
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd /home/webadmin/docker/drupal.madsnorgaard.net
            git pull
            docker-compose up -d --build > /dev/null 2>&1
            chown -R webadmin:webadmin /home/webadmin/docker/drupal.madsnorgaard.net
            docker exec madsnorgaard_drupal composer install --prefer-dist --no-progress

      - name: Install dependencies
        run: docker exec -w /home/webadmin/docker/drupal.madsnorgaard.net -T drupal composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Run Drush deploy hooks
        uses: appleboy/ssh-action@v0.1.2
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd /home/webadmin/docker/drupal.madsnorgaard.net
            docker exec madsnorgaard_drupal drush deploy:hook

      - name: Check services
        uses: appleboy/ssh-action@v0.1.2
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            services=("madsnorgaard_drupal" "madsnorgaard_drupal_db_admin" "madsnorgaard_drupal_db" "madsnorgaard_redis" "madsnorgaard_solr")

            for service in "${services[@]}"; do
              if [ $(docker ps -f name=$service --format "{{.Names}}" | wc -l) -eq 1 ]; then
                echo "$service is running."
              else
                echo "Error: $service is not running."
              fi
            done
