name: CI/CD Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  composer-setup:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        tools: composer:v2

    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v2
      with:
        path: vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Run test suite
      run: composer run-script test

  docker-setup:
    needs: composer-setup
    runs-on: ubuntu-latest
    env:
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      DB_HOST: ${{ secrets.DB_HOST }}
      HASH_SALT: ${{ secrets.HASH_SALT }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      DOMAIN_NAME: drupal.madsnorgaard.net
      TRUSTED_HOST_PATTERNS: drupal.madsnorgaard.net
      WEBROOT_SITE: web

    steps:
      - name: Cleanup build folder
        run: |
          rm -rf ./* ./.??*

      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Setup .env file
        run: |
          echo "DB_NAME=$DB_NAME" >> .env
          echo "DB_USER=$DB_USER" >> .env
          echo "DB_PASS=$DB_PASS" >> .env
          echo "DB_HOST=$DB_HOST" >> .env
          echo "HASH_SALT=$HASH_SALT" >> .env
          echo "REDIS_HOST=$REDIS_HOST" >> .env
          echo "REDIS_PASSWORD=$REDIS_PASSWORD" >> .env
          echo "DOMAIN_NAME=$DOMAIN_NAME" >> .env
          echo "TRUSTED_HOST_PATTERNS=$TRUSTED_HOST_PATTERNS" >> .env
          echo "WEBROOT_SITE=$WEBROOT_SITE" >> .env

      - name: Setup Docker network
        run: |
          docker network ls | grep -wq web || docker network create web

      - name: Start Docker containers
        run: docker-compose up -d

  deploy:
    needs: docker-setup
    runs-on: self-hosted
    env:
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      DEPLOY_KEY: ${{ secrets.DEPLOY_SSH_KEY }}

    steps:
      - name: Deploy Docker setup
        run: |
          ssh -o StrictHostKeyChecking=no -i <(echo "${DEPLOY_KEY}") -p $SSH_PORT $SSH_USERNAME@$SERVER_IP "cd /docker/drupal.madsnorgaard.net && docker-compose pull && docker-compose up -d"

      - name: Check Docker logs
        run: |
          ssh -o StrictHostKeyChecking=no -i <(echo "${DEPLOY_KEY}") -p $SSH_PORT $SSH_USERNAME@$SERVER_IP "cd /docker/drupal.madsnorgaard.net && docker-compose logs --tail=50"

      - name: Update Drupal
        run: |
          ssh -o StrictHostKeyChecking=no -i <(echo "${DEPLOY_KEY}") -p $SSH_PORT $SSH_USERNAME@$SERVER_IP "cd /docker/drupal.madsnorgaard.net && docker-compose exec -T madsnorgaard_drupal bash -c 'drush updb -y; drush cim -y; drush cr;'"

      - name: Backup Drupal DB
        run: |
          ssh -o StrictHostKeyChecking=no -i <(echo "${DEPLOY_KEY}") -p $SSH_PORT $SSH_USERNAME@$SERVER_IP "cd /docker/drupal.madsnorgaard.net && docker-compose exec -T madsnorgaard_drupal bash -c 'drush sql-dump > backup_$(date +'%Y%m%d%H%M%S').sql'"
